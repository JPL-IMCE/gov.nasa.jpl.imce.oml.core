dependencies {
    compile project(':gov.nasa.jpl.imce.oml.dsl.ide')
    compile "org.eclipse.xtext:org.eclipse.xtext.builder:${xtextUIVersion}"
    compile "org.eclipse.xtext:org.eclipse.xtext.ui:${xtextUIVersion}"
    compile "org.eclipse.xtext:org.eclipse.xtext.ui.shared:${xtextUIVersion}"
    compile "org.eclipse.xtext:org.eclipse.xtext.ui.codetemplates.ui:${xtextUIVersion}"
    compile 'org.eclipse.platform:org.eclipse.ui.editors:+'
    compile 'org.eclipse.platform:org.eclipse.ui.ide:+'
    compile 'org.eclipse.platform:org.eclipse.ui:+'
    compile 'org.eclipse.platform:org.eclipse.compare:+'
    compile "org.eclipse.emf:org.eclipse.emf.edit:${emfUIVersion}"
    compile "org.eclipse.emf:org.eclipse.emf.edit.ui:${emfUIVersion}"

    xtextLanguages "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.8.3"
    xtextLanguages "org.eclipse.emf:org.eclipse.emf.mwe2.runtime:2.8.3"
}

configurations {
    mwe2 {
        extendsFrom compile
    }
    xtextLanguages {
        extendsFrom compile
    }
    compile.transitive = true
    testCompile.transitive = true
}

sourceSets {
    main {
        mkdir('src-gen')
        mkdir('xtend-gen')
        output.classesDir = 'build/classes/main/'
        java.srcDirs = ['src', 'src-gen', 'xtend-gen']
        resources.srcDirs = ['src', 'src-gen']
        xtendOutputDir = 'xtend-gen'
    }
    test {
        java.srcDirs = []
        resources.srcDirs = []
    }
}

xtext {
    version = "${xtextVersion}"
    languages {
        ecore {
            setup = 'org.eclipse.xtext.ecore.EcoreSupport'
        }
        codegen {
            setup = 'org.eclipse.emf.codegen.ecore.xtext.GenModelSupport'
        }
        xcore {
            setup = 'org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup'
            generator {
                javaSourceLevel = '1.8'
                outlet {
                    producesJava = true
                    cleanAutomatically = true
                }
            }
        }
    }
}

ext.eclipseManifest = manifest {
    attributes(
            "Manifest-Version": "1.0",
            "Bundle-ManifestVersion": "2",
            "Bundle-Name": "%pluginName",
            "Bundle-SymbolicName": "${project.name};singleton:=true",
            "Bundle-Version": "${project.version}",
            "Bundle-ClassPath": ".",
            "Bundle-Vendor": "%providerName",
            "Bundle-Localization": "plugin",
            "Bundle-RequiredExecutionEnvironment": "JavaSE-1.8",
            "Export-Package": '''gov.nasa.jpl.imce.oml.dsl.ui''',
            "Require-Bundle": '''org.eclipse.xtext.ui;visibility:=reexport,
 org.eclipse.xtext.ui.codetemplates.ui;visibility:=reexport,
 org.eclipse.xtext.ui.shared;visibility:=reexport,
 org.eclipse.xtext.builder;visibility:=reexport,
 org.eclipse.ui.editors;bundle-version="3.5.0";visibility:=reexport,
 org.eclipse.ui.ide;bundle-version="3.5.0";visibility:=reexport,
 org.eclipse.ui;visibility:=reexport,
 org.eclipse.emf.edit.ui;visibility:=reexport,
 org.eclipse.emf.edit;visibility:=reexport,
 org.eclipse.compare;visibility:=reexport,
 org.eclipse.xtext.builder;visibility:=reexport,
 org.eclipse.xtend.lib;visibility:=reexport,
 org.eclipse.xtext.xbase.lib;visibility:=reexport,
 gov.nasa.jpl.imce.oml.dsl.ide;visibility:=reexport''',
            "Bundle-ActivationPolicy": "lazy",
            "Bundle-Activator": "gov.nasa.jpl.imce.oml.dsl.ui.internal.DslActivator"

    )
}

task eclipseManifest {
    inputs.property("bundleName", project.name)
    inputs.property("bundleVersion", project.version)
    outputs.file(project.file('META-INF/MANIFEST.MF'))
    doLast {
        project.eclipseManifest.writeTo(project.file('META-INF/MANIFEST.MF'))
    }
}

jar {
    manifestContentCharset = 'UTF-8'
    manifest = project.eclipseManifest
}

eclipse {
    pathVariables 'GRADLE_HOME': gradle.gradleUserHomeDir
    project {
        natures 'org.eclipse.pde.PluginNature', 'org.eclipse.xtext.ui.shared.xtextNature', 'org.eclipse.pde.PluginNature'
        buildCommand 'org.eclipse.jdt.core.javabuilder'
        buildCommand 'org.eclipse.pde.ManifestBuilder'
        buildCommand 'org.eclipse.pde.SchemaBuilder'
        buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    }
    classpath {
        defaultOutputDir file('build/classes/main/')
    }
}

tasks.clean.doLast {
    file('src-gen').deleteDir()
    file('xtend-gen').deleteDir()
    file('plugin.properties').delete()
    file('plugin.xml').delete()
    file('plugin.xml_gen').delete()
}

clean.dependsOn(cleanEclipse)

tasks.cleanEclipse.doLast {
    file('META-INF').deleteDir()
}

tasks.eclipse.dependsOn(eclipseManifest)

tasks.eclipseClasspath.doFirst {
    file('src-gen').mkdir()
    file('xtend-gen').mkdir()
}
