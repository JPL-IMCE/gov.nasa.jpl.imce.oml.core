dependencies {
	compile project(':gov.nasa.jpl.imce.oml.model')
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
    compile 'com.fasterxml.uuid:java-uuid-generator:+'
    compile 'xml-resolver:xml-resolver:1.2'
}	

configurations {
	mwe2 {
		extendsFrom compile
	}
    xtextLanguages {
        extendsFrom compile
    }
    compile.transitive = true
    testCompile.transitive = true
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.8.3"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	// added for Xcore support
	mwe2 'org.eclipse.emf:org.eclipse.emf.ecore.xcore:+'
	mwe2 'org.eclipse.emf:org.eclipse.emf.codegen.ecore.xtext:+'
}

sourceSets {
    main {
        mkdir('src-gen')
        mkdir('xtend-gen')
        output.classesDir = 'build/classes/main/'
        java.srcDirs = ['src', 'src-gen', 'xtend-gen']
        resources.srcDirs = ['src', 'src-gen']
        xtendOutputDir = 'xtend-gen'
    }
    test {
        java.srcDirs = []
        resources.srcDirs = []
    }
}

ext.eclipseManifest = manifest {
    attributes(
            "Manifest-Version": "1.0",
            "Bundle-ManifestVersion": "2",
            "Bundle-Name": "%pluginName",
            "Bundle-SymbolicName": "${project.name};singleton:=true",
            "Bundle-Version": "${project.version}",
            "Bundle-ClassPath": ".",
            "Bundle-Vendor": "%providerName",
            "Bundle-Localization": "plugin",
            "Bundle-RequiredExecutionEnvironment": "JavaSE-1.8",
            "Export-Package": '''gov.nasa.jpl.imce.oml.dsl,
 gov.nasa.jpl.imce.oml.dsl.formatting2,
 gov.nasa.jpl.imce.oml.dsl.generator,
 gov.nasa.jpl.imce.oml.dsl.linking,
 gov.nasa.jpl.imce.oml.dsl.parser.antlr,
 gov.nasa.jpl.imce.oml.dsl.parser.antlr.internal,
 gov.nasa.jpl.imce.oml.dsl.scoping,
 gov.nasa.jpl.imce.oml.dsl.serializer,
 gov.nasa.jpl.imce.oml.dsl.services,
 gov.nasa.jpl.imce.oml.dsl.util,
 gov.nasa.jpl.imce.oml.dsl.validation''',
            "Require-Bundle": '''org.antlr.runtime;visibility:=reexport,
 org.eclipse.xtend.lib;visibility:=reexport,
 org.eclipse.xtext;visibility:=reexport,
 org.eclipse.xtext.util;visibility:=reexport,
 org.eclipse.xtext.xbase.lib;visibility:=reexport,
 gov.nasa.jpl.imce.oml.model;visibility:=reexport''',
            "Bundle-ActivationPolicy": "lazy"
    )
}

task eclipseManifest {
    inputs.property("bundleName", project.name)
    inputs.property("bundleVersion", project.version)
    outputs.file('META-INF/MANIFEST.MF')
    doLast {
        project.eclipseManifest.writeTo('META-INF/MANIFEST.MF')
    }
}

task makeJar (type: Jar, dependsOn: eclipseManifest) {
    manifestContentCharset = 'UTF-8'
    manifest = project.eclipseManifest
    from('src-gen') {
        include '**/*.g'
    }
}

eclipse {
    pathVariables 'GRADLE_HOME': gradle.gradleUserHomeDir
    project {
        natures 'org.eclipse.pde.PluginNature', 'org.eclipse.xtext.ui.shared.xtextNature'
        buildCommand 'org.eclipse.pde.ManifestBuilder'
        buildCommand 'org.eclipse.pde.SchemaBuilder'
        buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    }
    classpath {
        defaultOutputDir file('build/classes/main/')
    }
}

tasks.clean.doLast {
    file('.antlr-generator-3.2.0-patch.jar').delete()
    file('src-gen').deleteDir()
    file('xtend-gen').deleteDir()
}

clean.dependsOn(cleanEclipse)

tasks.cleanEclipse.doLast {
    file('META-INF').deleteDir()
}

tasks.eclipse.dependsOn(eclipseManifest)

tasks.eclipseClasspath.doFirst {
    file('src-gen').mkdir()
    file('xtend-gen').mkdir()
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/gov/nasa/jpl/imce/oml/dsl/GenerateOntologicalModelingLanguage.mwe2"
	inputs.file "src/gov/nasa/jpl/imce/oml/dsl/OntologicalModelingLanguage.xtext"
    inputs.files "src/**/*.xtend"
	outputs.dir "build/src-gen"
	args += "src/gov/nasa/jpl/imce/oml/dsl/GenerateOntologicalModelingLanguage.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "NicolasRouquette"
            name "Nicolas F. Rouquette"
            email "nicolas.f.rouquette@jpl.nasa.gov"
        }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId project.name
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'XText concrete syntax grammar for the Ontological Modeling Language')
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['mavenPublication']
    dryRun = false
    pkg {
        repo = 'gov.nasa.jpl.imce'
        userOrg = 'jpl-imce'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core'
        websiteUrl = 'https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core'
        issueTrackerUrl = 'https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core/issues'
        desc = 'Ontological Modeling Language grammar & parser'
        githubRepo = 'JPL-IMCE/gov.nasa.jpl.imce.oml.core'
        githubReleaseNotesFile = 'README.md'
        version {
            gpg {
                sign = true // sign with Bintray's internal keys
            }
        }
    }
}